<% layout('/layouts/adminboilerplate') -%>
<style>

.container .wrapper{
width: 100%;
height: 15vh;
background: rgb(255, 255, 255);
display: flex;
justify-content: center;
align-items: center;
border-radius: 20px;
box-shadow: 10px 5px 5px #0077b6;
}


.wrapper p{
    color: #0077b6;
    font-size: 15px;
}

.wrapper .totalsales{
width: 15%;
height: 75%;
background-color: aliceblue;
margin-left: 1rem;
display: flex;
flex-direction: column;
justify-content: center;
align-items: center;
border-radius: 10px;
box-shadow: 10px 5px 5px #0077b6;
padding: 2em;
line-height: 2px;
}
.wrapper .totalStudents{
width: 15%;
height: 75%;
background-color: aliceblue;
margin-left: 1rem;
display: flex;
flex-direction: column;
justify-content: center;
align-items: center;
border-radius: 10px;
box-shadow: 10px 5px 5px #0077b6;
padding: 2em;
line-height: 2px;
}

h4 i{
color: #0077b6;
}

.chart-wrapper .salesChart{
width: 45%;
height: 40vh;
border-radius: 10px;
display: flex;
justify-content: center;
align-items: center;
background-color: aliceblue;
box-shadow: 10px 5px 5px #0077b6;
}

.chart-wrapper .studentsChart{
width: 50%;
height: 40vh;
border-radius: 10px;
display: flex;
justify-content: center;
align-items: center;
background-color: aliceblue;
box-shadow: 10px 5px 5px #0077b6;
}

.container .chart-wrapper{
width: 100%;
height: 50vh;
background: rgb(255, 255, 255);
display: flex;
justify-content: center;
align-items: center;
border-radius: 20px;
box-shadow: 10px 5px 5px #0077b6;
gap: 1rem;
}

.stats {
  width: 100%;
  height: 50vh;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  background: rgb(255, 255, 255);
  /* Add your image path here */
  background-size: cover;
  background-position: center;
  background-attachment: fixed;
  padding: 10rem;
  margin-bottom: 2rem;
  font-family: 'Ubuntu', sans-serif;
  margin-top: 2rem;
  border-radius: 20px;
  box-shadow: 10px 5px 5px #0077b6;
}

.stats-container {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: row;
  gap: 2rem;
}

.stats-container .stat-box {
  width: 300px;
  height: 300px;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
}

.stat-box h1 {
  font-size: 80px;
  color: #0077b6;
}

.stat-box p {
  font-size: 20px;
  color: #0077b6;
}

@keyframes countAnimation {
  from {
    opacity: 0;
    transform: translateY(20px);
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate {
  animation: countAnimation 1s ease-in-out forwards;
}

.stats h1 {
  color: #0077b6;
  margin-top: 2rem;
  font-size: 70px;

}

</style>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>


<div class="container">
    <div class="wrapper">
        <div class="totalsales"> 
             <h4><i class="fa-solid fa-dollar-sign me-3"></i><%= totalSales.toFixed(2) %></h4>
        <p>Total Sales</p>
        </div>
  <div class="totalStudents">
    <h4><i class='fas fa-user-graduate me-3'></i><%= totalStudents %></h4>
    <p>Total Students</p> 
</div>


</div>

<div class="chart-wrapper mt-4">
    <div class="salesChart mt-4">
        <canvas id="monthlySalesChart"></canvas>
    </div>
    <div class="studentsChart mt-4">
        <canvas id="monthlyStudentsChart"></canvas>
      </div>

</div>

<section class="stats">
    <h1 class="stats-title">STUDENT STATISTICS</h1>
    <div class="stats-container">
        <div class="stat-box col-3 animate">
            <h1 data-target="<%= curriculumStats['Khmer Education Program'] %>">
                <%= curriculumStats['Khmer Education Program'] %>
            </h1>
            <p class="curriculum-stat-khmer">Khmer Education Program</p>
        </div>
        <div class="stat-box col-3 animate">
            <h1 data-target="<%= curriculumStats['International English Program'] %>">
                <%= curriculumStats['International English Program'] %>
            </h1>
            <p class="curriculum-stat-IEP">International English Program</p>
        </div>
        <div class="stat-box col-3 animate">
            <h1 data-target="<%= curriculumStats['Chinese Language Classes'] %>">
                <%= curriculumStats['Chinese Language Classes'] %>
            </h1>
            <p class="curriculum-stat-Chinese">Chinese Language Classes</p>
        </div>
        <div class="stat-box col-3 animate">
            <h1 data-target="<%= curriculumStats['General English Program'] %>">
                <%= curriculumStats['General English Program'] %>
            </h1>
            <p class="curriculum-stat-GEP">General English Program</p>
        </div>
    </div>
</section>
</div>

<script>
    
const monthlySalesData = <%= JSON.stringify(monthlySalesData) %>;
const monthlyStudentsData = <%= JSON.stringify(monthlyStudentsData) %>; // Use the monthlyStudentsData value

// Create a new Chart.js chart for monthly sales
const monthlySalesCtx = document.getElementById('monthlySalesChart').getContext('2d');
new Chart(monthlySalesCtx, {
  type: 'line',
  data: {
    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    datasets: [{
      label: 'Monthly Sales',
      data: monthlySalesData,
      backgroundColor: 'rgba(75, 192, 192, 0.2)',
      borderColor: 'rgba(75, 192, 192, 1)',
      borderWidth: 1
    }]
  },
  options: {
    scales: {
      y: {
        beginAtZero: true
      }
    }
  }
});

// Create a new Chart.js chart for monthly student registrations
const monthlyStudentsCtx = document.getElementById('monthlyStudentsChart').getContext('2d');
new Chart(monthlyStudentsCtx, {
  type: 'bar',
  data: {
    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    datasets: [{
      label: 'Monthly Student Registrations',
      data: monthlyStudentsData, // Use the monthlyStudentsData value
      backgroundColor: 'rgba(255, 99, 132, 0.2)',
      borderColor: 'rgba(255, 99, 132, 1)',
      borderWidth: 1
    }]
  },
  options: {
    scales: {
      y: {
        beginAtZero: true
      }
    }
  }
});


  </script>


<script>

document.addEventListener("DOMContentLoaded", function () {
    const counters = document.querySelectorAll(".stat-box h1");
    const statsContainer = document.querySelector(".stats-container");

    let isCounting = false; // Flag to prevent overlapping counts

    // Function to start counting
    function startCounting() {
        if (isCounting) return;
        isCounting = true;

        counters.forEach((counter) => {
            counter.textContent = 0; // Reset counter on each start
            const target = +counter.dataset.target; // Use a data attribute for target value
            const animationDuration = 2000; // 2 seconds
            const step = (target / (animationDuration / 16)) * 2;

            let currentCount = 0;
            const countInterval = setInterval(() => {
                if (currentCount < target) {
                    currentCount += step;
                    counter.textContent = Math.round(currentCount);
                } else {
                    counter.textContent = target;
                    clearInterval(countInterval);
                    isCounting = false; // Reset the counting flag

                    // Check if all counters have finished counting
                    const allCounted = Array.from(counters).every(
                        (c) => +c.textContent === +c.dataset.target
                    );
                    if (allCounted) {
                        // Remove scroll event listener after all counters are counted
                        window.removeEventListener("scroll", handleScroll);
                    }
                }
            }, 16);

            // Apply animation class
            counter.parentElement.classList.add("animate");
        });
    }

    // Function to handle scroll event
    function handleScroll() {
        if (isElementInViewport(statsContainer)) {
            startCounting();
        }
    }

    // Check if the stats section is in view
    function isElementInViewport(element) {
        const rect = element.getBoundingClientRect();
        return (
            rect.top >= 0 &&
            rect.bottom <= (window.innerHeight || document.documentElement.clientHeight)
        );
    }

    // Reset counters on page load
    startCounting();

    // Listen for scroll event with throttling (debounce)
    let isScrolling;
    window.addEventListener("scroll", () => {
        clearTimeout(isScrolling);
        isScrolling = setTimeout(handleScroll, 100);
    });
});

</script>